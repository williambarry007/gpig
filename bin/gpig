#!/usr/bin/env ruby

# Author: William Barry (william@nine.is)
# http://github.com/williambarry007/gpig
# Description: Gpig is a tool that makes gem development quick and easy.
# Have fun :)

require 'gpig/version'
require 'trollop'
require 'yaml'

def increment_version(vfile)
  str = File.open(vfile).read
  str.gsub!(/\r\n?/, "\n")
  str2 = ""
  new_version = ""
  str.each_line do |line|
    if (!line.index('VERSION').nil?)
      arr = line.split('=')
      arr = arr[1].gsub('"', '').gsub("'", '').strip.split('.')
      arr[arr.count-1] = arr[arr.count-1].to_i + 1
      new_version = arr.join('.')
      line = "  VERSION = '#{new_version}'\n"
    end
    str2 << line
  end
  File.open(vfile, 'w') { |file| file.write(str2) }
  return new_version
end

def set_gem_version(gemfile, gemname, version)
  return if !File.exists?(gemfile)
  file = File.open(gemfile, 'rb')
  str = file.read
  file.close
  str2 = ""
  str.each_line do |line|
    if (!line.strip.start_with?('#') && (!line.index("gem '#{gemname}'").nil? || !line.index("gem \"#{gemname}\"").nil?))
      str2 << "##{line}"
    else
      str2 << line
    end
  end
  str2 << "gem '#{gemname}', '= #{version}'\n"
  File.open(gemfile, 'w') {|file| file.write(str2) }
end

opts = Trollop::options do
#  version "gpig version #{Gpig::VERSION}\n"
  banner <<-EOS
--------------------------------------------------------------------------------  
GPIG (Git Push Install Gem)
Gpig is a nice little tool to help speed up gem development.  It allows you 
to make a change in your gem code, then quickly increment the version of 
the gem code, push changes to a git repository, and install the new version 
of the gem locally so you can test it.
--------------------------------------------------------------------------------
EOS
  version "gpig Version #{Gpig::VERSION}\n"
  opt :conf_file      , "The configuration file.", :type => :string, :default => File.join(Dir.pwd,'.gpig')
  opt :increment      , "Whether or not to increment the version.", :default => true
  opt :version_file   , "The version file that holds the VERSION variable that will be incremented.", :type => :string
  opt :repo_url       , "The URL of the git repo from which the new gem will be installed.", :type => :string
  opt :remote         , "The remote to which the local code changes will be pushed.", :type => :string, :default => 'origin'
  opt :branch         , "The branch to which the local code changes will be committed." , :type => :string, :default => 'master'
  opt :message        , "The message when committing files to the repo.", :type => :string, :default => "More changes"
  opt :gemname        , "The name of the gem that is being updated.", :type => :string, :default => ""
  opt :gemfile        , "A gemfile that should be updated with the new version of the gem.", :type => :string, :default => ""
  opt :live           , "Whether or not to push the new gem to rubygems.", :type => :boolean, :default => false
end

conf = YAML::load_file(opts.conf_file)
conf.each do |key,val|
  opts[key.to_sym] = val
end

if (!opts.version_file || !opts.repo_url || opts.version_file.strip.length == 0 || opts.repo_url.strip.length == 0)
  opts.help  
  exit 
elsif (!File.exists?(opts.version_file))
  puts "Error: the version file (#{opts.version_file}) doesn't seem to exist.\n";
  exit
end

str = `git status`
if (!str.index('nothing to commit').nil?)
  puts "There aren't any changes in the working directory.\n\n"
  exit
end

puts "\nAdding files to git repo..."
`git add -A`

puts "\nCommitting files to git repo..."
`git commit -m "#{opts.message}"`

puts "\nPulling in any changes..."
`git pull #{opts.remote} #{opts.branch}`

new_version = false
if (opts.increment)
  puts "\nModifying the version..."
  new_version = increment_version(opts.version_file)
end

puts "\nAdding version file to git repo..."
`git add -A`

puts "\nCommitting change of version file..."
`git commit -m "Updated version file"`

puts "\nPushing changes to the remote..."
`git push #{opts.remote} #{opts.branch}`

puts "\nInstalling version #{new_version} of gem locally..."
`gem specific_install -l #{opts.repo_url}`

if opts.live
  puts "\nBuilding live version of gem..."
  `gem build #{gemname}.gemspec`
  puts "\nPushing gem to rubygems..."
  `gem push #{gemname}-#{new_version}.gem`
  puts "\nCleaning up..."
  `rm -f *.gem`
end

if (opts.gemfile.length > 0)
  if (opts.gemname.strip.length == 0)
    str = `ls -a *.gemspec`
    str = str.gsub('.gemspec', '').gsub("\n", '')
    opts[:gemname] = str
  end
  if (opts.gemname.strip.length > 0)
    puts "\nUpdating version of #{opts.gemname} in #{opts.gemfile}..."
    set_gem_version(opts.gemfile, opts.gemname, new_version)
  else
    puts "\nError: could not determine gem name for updating gem file."
    puts "To fix this, add the gem name to your gpig config file."
  end
end

puts "\n"
puts "        _"
puts "     '-(-' _     _.....__    _   _"
puts "        '-(-'  .'        '. | \\_/_|"
puts "           `'-/            \\/      \\"
puts "             |              `   6 6 |_"
puts "             |                     /..\\"
puts "              \\       |          ,_\\__/"
puts "               /     /    /   ___.--'"
puts "              <   .-;`----`\\  \\ \\"
puts "               \\  \\ \\       \\  \\ \\"
puts "                \\__\\_\\       \\__\\_\\"
puts "\n-------- Awwww yeah!  You're all finished! --------\n\n"  
