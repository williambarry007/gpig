#!/usr/bin/env ruby

#require 'gpig/version'
require 'trollop'
require 'yaml'

def increment_version(vfile)
  str = File.open(vfile).read
  str.gsub!(/\r\n?/, "\n")
  str2 = ""
  str.each_line do |line|
    if (!line.index('VERSION').nil?)
      arr = line.split('=')
      arr = arr[1].gsub('"', '').gsub("'", '').strip.split('.')
      arr[arr.count-1] = arr[arr.count-1].to_i + 1
      v = arr.join('.')
      line = "  VERSION = '#{v}'\n"
    end
    str2 << line
  end
  File.open(vfile, 'w') { |file| file.write(str2) }
end

opts = Trollop::options do
#  version "gpig version #{Gpig::VERSION}\n"
  banner <<-EOS
--------------------------------------------------------------------------------  
GPIG (Git Push Install Gem)
Gpig is a nice little tool to help speed up gem development.  It allows you 
to make a change in your gem code, then quickly increment the version of 
the gem code, push changes to a git repository, and install the new version 
of the gem locally so you can test it.
--------------------------------------------------------------------------------
EOS
  opt :conf_file      , "The configuration file.", :type => :string, :default => File.join(Dir.pwd,'.gpig')
  opt :increment      , "Whether or not to increment the version.", :default => true
  opt :version_file   , "The version file that holds the VERSION variable that will be incremented.", :type => :string
  opt :repo_url       , "The URL of the git repo from which the new gem will be installed.", :type => :string
  opt :remote         , "The remote to which the local code changes will be pushed.", :type => :string, :default => 'origin'
  opt :branch         , "The branch to which the local code changes will be committed." , :type => :string, :default => 'master'
  opt :commit_message , "The message when committing files to the repo.", :type => :string, :default => "More changes"
end

conf = YAML::load_file(opts.conf_file)
conf.each do |key,val|
  opts[key.to_sym] = val
end

if (!opts.version_file || !opts.repo_url || opts.version_file.strip.length == 0 || opts.repo_url.strip.length == 0)
  opts.help  
  exit 
elsif (!File.exists?(opts.version_file))
  puts "Error: the version file (#{opts.version_file}) doesn't seem to exist.\n";
  exit
end

str = `git status`
if (!str.index('nothing to commit').nil?)
  puts "There aren't any changes in the working directory.\n\n"
  exit
end

if (opts.increment)
  puts "\nModifying the version..."
  increment_version(opts.version_file)
end

puts "\nAdding files to git repo..."
`git add -A`

puts "\nCommitting files to git repo..."
`git commit -m "#{opts.commit_message}"`

puts "\nPulling in any changes..."
`git pull #{opts.remote} #{opts.branch}`

puts "\nPushing in any changes..."
`git push #{opts.remote} #{opts.branch}`

puts "\nInstalling new version of gem..."
`gem specific_install -l #{repo}`

puts "\nFinished!\n\n"
